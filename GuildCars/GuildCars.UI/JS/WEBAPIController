using GuildCars.Data.Factories;
using GuildCars.Models.Queries;
using GuildCars.UI.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;

namespace GuildCars.UI.Controllers
{
    public class SearchController : ApiController
    {
        [Route("api/Inventory")]
        [AcceptVerbs("GET")]
        public IHttpActionResult APIInventory()
        {
            return Ok();
        }

        [Route("api/Inventory/New/SearchTerm/{searchTerm}/PriceMin/{priceMin}/PriceMax/{priceMax}/YearMin/{yearMin}/YearMax/{yearMax}/Mileage/{mileage}")]
        [AcceptVerbs("GET")]
        public IHttpActionResult SearchVehicles(string searchTerm, decimal priceMin, decimal priceMax, int yearMin, int yearMax, int mileage)
        {
            var vehicleRepo = VehicleRepositoryFactory.GetVehicleRepository();
            var bodystyles = BodyStyleRepositoryFactory.GetBodyStyleRepository().GetBodyStyles();
            var colors = ColorRepositoryFactory.GetColorRepository().GetColors();
            var makes = MakeRepositoryFactory.GetMakeRepository().GetMakes();
            var models = ModelRepositoryFactory.GetModelRepository().GetModels();
            var transmission = TransmissionTypeRepositoryFactory.GetTransmissionTypeRepository().GetTransmissions();

            try
            {
                var vehicles = vehicleRepo.GetVehiclesBySearchParameters(searchTerm, priceMin, priceMax, yearMin, yearMax, mileage);
                var vehiclesToReturn = new List<VehicleDisplayVM>();
                foreach(var vehicle in vehicles)
                {
                    var model = new VehicleDisplayVM();

                    model.Vehicle = vehicle;
                    model.Model = models.FirstOrDefault(m => m.ModelID == vehicle.ModelID);
                    model.Make = makes.FirstOrDefault(m => m.MakeID == vehicle.MakeID);
                    model.BodyStyle = bodystyles.FirstOrDefault(b => b.BodyStyleID == vehicle.BodyStyleID);
                    model.ExteriorColor = colors.FirstOrDefault(c => c.ColorID == vehicle.ExteriorColor);
                    model.InteriorColor = colors.FirstOrDefault(c => c.ColorID == vehicle.InteriorColor);
                    model.Transmission = transmission.FirstOrDefault(t => t.TransmissionID == vehicle.TransmissionID);

                    vehiclesToReturn.Add(model);

                }
                return Ok(vehiclesToReturn);
            }
            catch
            {
                return BadRequest();
            }
        }
    }
}
